# New Contract

type NewContract @entity {
  id: ID!

  inputAmount: BigInt!
  outputAmount: BigInt!
  expiration: BigInt!
  contractId: Bytes!
  hashLock: Bytes!
  sender: Bytes!
  receiver: Bytes!
  outputNetwork: String!
  outputAddress: String!
  transactionHash: Bytes!
  isSender: Boolean!
}

type NewContractSender @entity {
  id: ID!

  swaps: [NewContract!]!
}

type NewContractReceiver @entity {
  id: ID!

  swaps: [NewContract!]!
}

# Withdraw

type Withdraw @entity {
  id: ID!

  withdrawId: Bytes!
  secret: Bytes!
  hashLock: Bytes!
  sender: Bytes!
  receiver: Bytes!
  transactionHash: Bytes!
}

type WithdrawSender @entity {
  id: ID!

  withdraws: [Withdraw!]!
}

type WithdrawReceiver @entity {
  id: ID!

  withdraws: [Withdraw!]!
}

# Refund
type Refund @entity {
  id: ID!

  refundId: Bytes!
  hashLock: Bytes!
  sender: Bytes!
  receiver: Bytes!
  transactionHash: Bytes!
}

type RefundSender @entity {
  id: ID!

  refunds: [Refund!]!
}

type RefundReceiver @entity {
  id: ID!

  refunds: [Refund!]!
}
