// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class NewContract extends EthereumEvent {
  get params(): NewContract__Params {
    return new NewContract__Params(this);
  }
}

export class NewContract__Params {
  _event: NewContract;

  constructor(event: NewContract) {
    this._event = event;
  }

  get inputAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get id(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get hashLock(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get sender(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get outputNetwork(): string {
    return this._event.parameters[7].value.toString();
  }

  get outputAddress(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class Refund extends EthereumEvent {
  get params(): Refund__Params {
    return new Refund__Params(this);
  }
}

export class Refund__Params {
  _event: Refund;

  constructor(event: Refund) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get hashLock(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Withdraw extends EthereumEvent {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get secret(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get hashLock(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Contract__contractsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Bytes;
  value5: Address;
  value6: Address;
  value7: string;
  value8: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Bytes,
    value5: Address,
    value6: Address,
    value7: string,
    value8: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromFixedBytes(this.value4));
    map.set("value5", EthereumValue.fromAddress(this.value5));
    map.set("value6", EthereumValue.fromAddress(this.value6));
    map.set("value7", EthereumValue.fromString(this.value7));
    map.set("value8", EthereumValue.fromString(this.value8));
    return map;
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  ACTIVE(): BigInt {
    let result = super.call("ACTIVE", []);

    return result[0].toBigInt();
  }

  try_ACTIVE(): CallResult<BigInt> {
    let result = super.tryCall("ACTIVE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  EXPIRED(): BigInt {
    let result = super.call("EXPIRED", []);

    return result[0].toBigInt();
  }

  try_EXPIRED(): CallResult<BigInt> {
    let result = super.tryCall("EXPIRED", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  INVALID(): BigInt {
    let result = super.call("INVALID", []);

    return result[0].toBigInt();
  }

  try_INVALID(): CallResult<BigInt> {
    let result = super.tryCall("INVALID", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  REFUNDED(): BigInt {
    let result = super.call("REFUNDED", []);

    return result[0].toBigInt();
  }

  try_REFUNDED(): CallResult<BigInt> {
    let result = super.tryCall("REFUNDED", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  WITHDRAWN(): BigInt {
    let result = super.call("WITHDRAWN", []);

    return result[0].toBigInt();
  }

  try_WITHDRAWN(): CallResult<BigInt> {
    let result = super.tryCall("WITHDRAWN", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  contracts(param0: Bytes): Contract__contractsResult {
    let result = super.call("contracts", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return new Contract__contractsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBytes(),
      result[5].toAddress(),
      result[6].toAddress(),
      result[7].toString(),
      result[8].toString()
    );
  }

  try_contracts(param0: Bytes): CallResult<Contract__contractsResult> {
    let result = super.tryCall("contracts", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__contractsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBytes(),
        value[5].toAddress(),
        value[6].toAddress(),
        value[7].toString(),
        value[8].toString()
      )
    );
  }

  getSingleStatus(id: Bytes): BigInt {
    let result = super.call("getSingleStatus", [
      EthereumValue.fromFixedBytes(id)
    ]);

    return result[0].toBigInt();
  }

  try_getSingleStatus(id: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getSingleStatus", [
      EthereumValue.fromFixedBytes(id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getStatus(ids: Array<Bytes>): Array<BigInt> {
    let result = super.call("getStatus", [
      EthereumValue.fromFixedBytesArray(ids)
    ]);

    return result[0].toBigIntArray();
  }

  try_getStatus(ids: Array<Bytes>): CallResult<Array<BigInt>> {
    let result = super.tryCall("getStatus", [
      EthereumValue.fromFixedBytesArray(ids)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class NewContractCall extends EthereumCall {
  get inputs(): NewContractCall__Inputs {
    return new NewContractCall__Inputs(this);
  }

  get outputs(): NewContractCall__Outputs {
    return new NewContractCall__Outputs(this);
  }
}

export class NewContractCall__Inputs {
  _call: NewContractCall;

  constructor(call: NewContractCall) {
    this._call = call;
  }

  get outputAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get hashLock(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get outputNetwork(): string {
    return this._call.inputValues[4].value.toString();
  }

  get outputAddress(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class NewContractCall__Outputs {
  _call: NewContractCall;

  constructor(call: NewContractCall) {
    this._call = call;
  }
}

export class RefundCall extends EthereumCall {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class WithdrawCall extends EthereumCall {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get secret(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
